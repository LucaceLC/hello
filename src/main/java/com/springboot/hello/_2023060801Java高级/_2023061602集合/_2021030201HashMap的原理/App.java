package com.springboot.hello._2023060801Java高级._2023061602集合._2021030201HashMap的原理;

public class App {

    /**
     * 首先HashMap是什么
     * HashMap是一种key-value的键值对存储结构
     *
     * 一、默认初始化大小16 负载因子0.75
     * 负载因子是用来干什么的：存储容量比例达到负载因子时，hashmap会进行扩容
     *
     *
     * 二、扩容的过程1.5倍  size + size >>1
     * 三、HashMap的存储过程
     *     首先获取对象调用对象的hashCode()方法，获取哈希值
     *     接下来计算对象应该放在哪个数组索引上
     *      目的：要让得到的索引尽量均匀
     *      1。简单算法取余数
     *      2。jdk 1,7 1.8的源码是 hashCode & （length-1） hash值与数组大小-1，
     *        jdk 1.11是 hashCode * (hashCode >>> 16) 计算的
     *          引申：无符号向右移动16位，目的是让hashCode的高16位进行参与异或运算
     *          因为HashMap的数组结构，length默认是16，2^3次方，在计算hash值时，hashCode的高位都用不到
     *          这样做的目的是让计算的低3位更加更加散列
     *          取异或，同为0，异为1
     *      *          引申，为什么不用&与 ｜或，因为如果用与或，会让每一位的计算结果趋向于0或1
     *      *          达不到均匀分布的目的
     *      3得到数组索引后，开始put元素，put一个元素，
     *          如果没有元素，在元素链表后增加一个元素
     *          如果有元素， 调用对象equals方法，如果key是该对象，替换value
     *          jdk1.8后，如果链表元素超过8，那么链表会转换成红黑树
     *
     * 四、HashMap的get过程，
     *      计算数组索引步骤相同，燃火调用传入的key的eqauls方法和链表的元素依次比较，得到value
     */
}

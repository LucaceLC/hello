package com.springboot.hello._2023060801Java高级._2023061304公平锁与非公平锁;

public class App {
    /**
     * 公平锁：多线程获取锁资源，按申请锁资源的顺序获取锁，先到先得的原则
     * 非公平：允许插队获取锁资源
     *
     * 公平锁适合需要严格保证顺序执行的业务，公平获取锁资源，保证线程任务一定会执行
     * 避免饥饿
     *
     * ReentrantLock可重入锁默认采取非公平锁，可以设置成公平锁
     *
     * JUC内部有Sync类，维护了一个FIFO的先进先出的双端队列，获取锁资源时，如果等待队列中有线程
     * 那么本线程进入队列等待，锁资源释放之后，从队列选择最早排队的线程
     *
     * 非公平锁的话，无论等待队列中是否有等待队列，都会使用CAS尝试获取锁资源，
     * 可能造成线程一直无法获取锁资源的问题
     *
     * 非公平锁的目的主要还是为了提高性能，较少多线程环境下的，用户态和内核态的切换，上下文的切换等
     * 减少耗时，如果锁资源刚好释放，新线程刚好获取锁的临界点，有效率提升
     */
}

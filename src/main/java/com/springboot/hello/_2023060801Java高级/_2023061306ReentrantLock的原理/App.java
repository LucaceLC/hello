package com.springboot.hello._2023060801Java高级._2023061306ReentrantLock的原理;

public class App {
    /**
     * 可重入锁的原理
     *
     * 依赖AQS的等待队列，锁资源的获取和释放涉及几个方面
     *
     * 锁状态，标识出线程获取锁资源和次数
     * 内部维护了一个int类型的state变量，高16位标识获取锁的次数，低16位标识获取锁的状态
     *
     * 加锁的过程
     * 尝试cas获取锁，如果获取到低16位+1，高16+1。当前获取到锁资源
     * 再尝试获取锁资源时，无需进行cas，高16位+1
     *
     * 释放锁
     * 尝试进行cas释放锁，高16位-1
     * 如果减1后是0，把低16位-1。释放锁资源，同时唤醒等待队列的head的线程
     * 如果减1后不是0，直接退出释放锁，不会唤醒其他线程
     *
     * 公平性
     * 默认是非公平的
     * 依赖aqs，Sync维护了一个FIFO的双向等待队列，先进先出原则，公平锁的原则时
     * 如果等待队列里有线程，那么线程加入到队列尾部
     * 如果没有线程，cas尝试加锁
     *
     * 非公平的话，无论队列是否有等待线程，都会进行cas尝试，可能有线程一直无法释放的问题
     *
     * 可重入锁可中断
     *
     */
}

package com.springboot.hello._20190917Ioc._072021022601AOP;

public class App {
    /**
     * aop的实现方式
     * 什么是aop 面向切面编程
     *
     * 横向抽取，相同功能的横向抽取，代理类实现功能，事件/缓存/监控/缓存
     *
     * aop的实现原理：

     * aop底层是使用代理实现的
     * 一、手动代理
     *      1jdk的动态代理
     *      接口+实现
     *      2cglib字节码增强
     *      实现
     * 3aop术语
     * 目标类，target，需要被代理的类
     * 连接点，指那些可能被拦截的方法 joinPoint，例如：一个service的所有方法
     * 切入点，pointCut，已经被增强的连接点，例如：一个特定的方法
     * 增强/通知，advice，增强的功能代码，例如aftre before
     *      前置通知，后置通知，环绕通知
     * 织入，weaving，把增强advice应用到目标类target创建代理对象的过程
     * 代理，proxy
     * 切面，aspect,切入点pointCut和通知advice的结合
     *
     * 特殊：引介introduction，特殊的增强，在不修改代码的前台下，引介可以在运行期间，动态的添加一些方法和属性
     *
     * 完成一个aop切面有哪些要素：
     * 首先要有目标类target
     * 然后目标类中的所有方法叫，连接点JoinPoint
     * 选择特定的方法，进行切面增强，这个方法叫PointCut，切入点
     * 增强的功能代码切面类，叫做advice，通知/增强，
     * 把增强和切入点整合，生成代理对象的过程叫做织入，weaving
     * 生成的对象叫做代理对象proxy
     * 切入点，被增强的方法和advice增强的结合，叫做切面
     *
     * 1jdk的动态代理，是对装饰者的简化
     * 必须要有接口+实现类
     *      目标类
     *      切面类
     *      工厂类生产代理对象：目标类和切面的结合，换句话说，切入点与增强的结合
     *
     * 二、半自动
     *
     * 三、全自动
     *
     * aspectJ
     */
}
